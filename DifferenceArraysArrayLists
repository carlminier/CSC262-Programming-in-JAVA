package Assignment3;
import java.util.ArrayList;

public class DifferenceArraysArrayLists {
    public static void main(String[] args) {
        // Arrays have a fixed size. You must specify the size at the time of creation.
        int[] intArray = new int[5]; // An array of integers with a size of 5

        // Adding elements to the array
        intArray[0] = 10;
        intArray[1] = 20;
        intArray[2] = 30;
        intArray[3] = 40;
        intArray[4] = 50;

        System.out.println("Array element at index 2: " + intArray[2]);

        // Arrays do not have built-in methods for common operations like adding or removing elements.
        // We have to manually manage the size and contents.

        // Iterating over the array using a for loop
        System.out.println("Array elements:");
        for (int i = 0; i < intArray.length; i++) {
            System.out.println(intArray[i]);
        }

        // ArrayLists can dynamically resize, so we don't need to specify an initial size.
        ArrayList<Integer> intArrayList = new ArrayList<>();

        // Adding elements to the ArrayList
        intArrayList.add(10);
        intArrayList.add(20);
        intArrayList.add(30);
        intArrayList.add(40);
        intArrayList.add(50);

        System.out.println("\nArrayList element at index 2: " + intArrayList.get(2));

        // ArrayLists have built-in methods for common operations like adding, removing, and checking elements.
        // For example, we can remove an element easily:
        intArrayList.remove(2); // Removes the element at index 2 (value 30)

        // Iterating over the ArrayList using a for-each loop
        System.out.println("ArrayList elements after removal:");
        for (int value : intArrayList) {
            System.out.println(value);
        }

        // Trying to add a new element to an ArrayList is straightforward
        intArrayList.add(60);
        System.out.println("ArrayList elements after adding 60:");
        for (int value : intArrayList) {
            System.out.println(value);
        }

        // ArrayList provides flexibility in size, whereas arrays do not.
        // However, ArrayLists are generally slower than arrays because of the overhead involved in resizing.
    }
}
